{"version":3,"file":"paymongo.js.cjs.production.min.js","sources":["../node_modules/regenerator-runtime/runtime.js","../src/store/index.ts","../src/utils/api-base.ts","../src/config.ts","../src/payment/intent/attach-intent.ts","../src/payment/intent/create-intent.ts","../src/payment/intent/retrieve-intent.ts","../src/payment/method/create-method.ts","../src/payment/method/retrieve-method.ts","../src/payment/webhook/create-webhook.ts","../src/payment/webhook/disable-webhook.ts","../src/payment/webhook/enable-webhook.ts","../src/payment/webhook/list-webhooks.ts","../src/payment/webhook/retrieve-webhook.ts","../src/payment/webhook/update-webhook.ts","../src/payment/source/create-source.ts","../src/payment/source/retrieve-source.ts","../src/index.ts"],"sourcesContent":["/**\n * Copyright (c) 2014-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nvar runtime = (function (exports) {\n  \"use strict\";\n\n  var Op = Object.prototype;\n  var hasOwn = Op.hasOwnProperty;\n  var undefined; // More compressible than void 0.\n  var $Symbol = typeof Symbol === \"function\" ? Symbol : {};\n  var iteratorSymbol = $Symbol.iterator || \"@@iterator\";\n  var asyncIteratorSymbol = $Symbol.asyncIterator || \"@@asyncIterator\";\n  var toStringTagSymbol = $Symbol.toStringTag || \"@@toStringTag\";\n\n  function define(obj, key, value) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n    return obj[key];\n  }\n  try {\n    // IE 8 has a broken Object.defineProperty that only works on DOM objects.\n    define({}, \"\");\n  } catch (err) {\n    define = function(obj, key, value) {\n      return obj[key] = value;\n    };\n  }\n\n  function wrap(innerFn, outerFn, self, tryLocsList) {\n    // If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.\n    var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;\n    var generator = Object.create(protoGenerator.prototype);\n    var context = new Context(tryLocsList || []);\n\n    // The ._invoke method unifies the implementations of the .next,\n    // .throw, and .return methods.\n    generator._invoke = makeInvokeMethod(innerFn, self, context);\n\n    return generator;\n  }\n  exports.wrap = wrap;\n\n  // Try/catch helper to minimize deoptimizations. Returns a completion\n  // record like context.tryEntries[i].completion. This interface could\n  // have been (and was previously) designed to take a closure to be\n  // invoked without arguments, but in all the cases we care about we\n  // already have an existing method we want to call, so there's no need\n  // to create a new function object. We can even get away with assuming\n  // the method takes exactly one argument, since that happens to be true\n  // in every case, so we don't have to touch the arguments object. The\n  // only additional allocation required is the completion record, which\n  // has a stable shape and so hopefully should be cheap to allocate.\n  function tryCatch(fn, obj, arg) {\n    try {\n      return { type: \"normal\", arg: fn.call(obj, arg) };\n    } catch (err) {\n      return { type: \"throw\", arg: err };\n    }\n  }\n\n  var GenStateSuspendedStart = \"suspendedStart\";\n  var GenStateSuspendedYield = \"suspendedYield\";\n  var GenStateExecuting = \"executing\";\n  var GenStateCompleted = \"completed\";\n\n  // Returning this object from the innerFn has the same effect as\n  // breaking out of the dispatch switch statement.\n  var ContinueSentinel = {};\n\n  // Dummy constructor functions that we use as the .constructor and\n  // .constructor.prototype properties for functions that return Generator\n  // objects. For full spec compliance, you may wish to configure your\n  // minifier not to mangle the names of these two functions.\n  function Generator() {}\n  function GeneratorFunction() {}\n  function GeneratorFunctionPrototype() {}\n\n  // This is a polyfill for %IteratorPrototype% for environments that\n  // don't natively support it.\n  var IteratorPrototype = {};\n  define(IteratorPrototype, iteratorSymbol, function () {\n    return this;\n  });\n\n  var getProto = Object.getPrototypeOf;\n  var NativeIteratorPrototype = getProto && getProto(getProto(values([])));\n  if (NativeIteratorPrototype &&\n      NativeIteratorPrototype !== Op &&\n      hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {\n    // This environment has a native %IteratorPrototype%; use it instead\n    // of the polyfill.\n    IteratorPrototype = NativeIteratorPrototype;\n  }\n\n  var Gp = GeneratorFunctionPrototype.prototype =\n    Generator.prototype = Object.create(IteratorPrototype);\n  GeneratorFunction.prototype = GeneratorFunctionPrototype;\n  define(Gp, \"constructor\", GeneratorFunctionPrototype);\n  define(GeneratorFunctionPrototype, \"constructor\", GeneratorFunction);\n  GeneratorFunction.displayName = define(\n    GeneratorFunctionPrototype,\n    toStringTagSymbol,\n    \"GeneratorFunction\"\n  );\n\n  // Helper for defining the .next, .throw, and .return methods of the\n  // Iterator interface in terms of a single ._invoke method.\n  function defineIteratorMethods(prototype) {\n    [\"next\", \"throw\", \"return\"].forEach(function(method) {\n      define(prototype, method, function(arg) {\n        return this._invoke(method, arg);\n      });\n    });\n  }\n\n  exports.isGeneratorFunction = function(genFun) {\n    var ctor = typeof genFun === \"function\" && genFun.constructor;\n    return ctor\n      ? ctor === GeneratorFunction ||\n        // For the native GeneratorFunction constructor, the best we can\n        // do is to check its .name property.\n        (ctor.displayName || ctor.name) === \"GeneratorFunction\"\n      : false;\n  };\n\n  exports.mark = function(genFun) {\n    if (Object.setPrototypeOf) {\n      Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);\n    } else {\n      genFun.__proto__ = GeneratorFunctionPrototype;\n      define(genFun, toStringTagSymbol, \"GeneratorFunction\");\n    }\n    genFun.prototype = Object.create(Gp);\n    return genFun;\n  };\n\n  // Within the body of any async function, `await x` is transformed to\n  // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test\n  // `hasOwn.call(value, \"__await\")` to determine if the yielded value is\n  // meant to be awaited.\n  exports.awrap = function(arg) {\n    return { __await: arg };\n  };\n\n  function AsyncIterator(generator, PromiseImpl) {\n    function invoke(method, arg, resolve, reject) {\n      var record = tryCatch(generator[method], generator, arg);\n      if (record.type === \"throw\") {\n        reject(record.arg);\n      } else {\n        var result = record.arg;\n        var value = result.value;\n        if (value &&\n            typeof value === \"object\" &&\n            hasOwn.call(value, \"__await\")) {\n          return PromiseImpl.resolve(value.__await).then(function(value) {\n            invoke(\"next\", value, resolve, reject);\n          }, function(err) {\n            invoke(\"throw\", err, resolve, reject);\n          });\n        }\n\n        return PromiseImpl.resolve(value).then(function(unwrapped) {\n          // When a yielded Promise is resolved, its final value becomes\n          // the .value of the Promise<{value,done}> result for the\n          // current iteration.\n          result.value = unwrapped;\n          resolve(result);\n        }, function(error) {\n          // If a rejected Promise was yielded, throw the rejection back\n          // into the async generator function so it can be handled there.\n          return invoke(\"throw\", error, resolve, reject);\n        });\n      }\n    }\n\n    var previousPromise;\n\n    function enqueue(method, arg) {\n      function callInvokeWithMethodAndArg() {\n        return new PromiseImpl(function(resolve, reject) {\n          invoke(method, arg, resolve, reject);\n        });\n      }\n\n      return previousPromise =\n        // If enqueue has been called before, then we want to wait until\n        // all previous Promises have been resolved before calling invoke,\n        // so that results are always delivered in the correct order. If\n        // enqueue has not been called before, then it is important to\n        // call invoke immediately, without waiting on a callback to fire,\n        // so that the async generator function has the opportunity to do\n        // any necessary setup in a predictable way. This predictability\n        // is why the Promise constructor synchronously invokes its\n        // executor callback, and why async functions synchronously\n        // execute code before the first await. Since we implement simple\n        // async functions in terms of async generators, it is especially\n        // important to get this right, even though it requires care.\n        previousPromise ? previousPromise.then(\n          callInvokeWithMethodAndArg,\n          // Avoid propagating failures to Promises returned by later\n          // invocations of the iterator.\n          callInvokeWithMethodAndArg\n        ) : callInvokeWithMethodAndArg();\n    }\n\n    // Define the unified helper method that is used to implement .next,\n    // .throw, and .return (see defineIteratorMethods).\n    this._invoke = enqueue;\n  }\n\n  defineIteratorMethods(AsyncIterator.prototype);\n  define(AsyncIterator.prototype, asyncIteratorSymbol, function () {\n    return this;\n  });\n  exports.AsyncIterator = AsyncIterator;\n\n  // Note that simple async functions are implemented on top of\n  // AsyncIterator objects; they just return a Promise for the value of\n  // the final result produced by the iterator.\n  exports.async = function(innerFn, outerFn, self, tryLocsList, PromiseImpl) {\n    if (PromiseImpl === void 0) PromiseImpl = Promise;\n\n    var iter = new AsyncIterator(\n      wrap(innerFn, outerFn, self, tryLocsList),\n      PromiseImpl\n    );\n\n    return exports.isGeneratorFunction(outerFn)\n      ? iter // If outerFn is a generator, return the full iterator.\n      : iter.next().then(function(result) {\n          return result.done ? result.value : iter.next();\n        });\n  };\n\n  function makeInvokeMethod(innerFn, self, context) {\n    var state = GenStateSuspendedStart;\n\n    return function invoke(method, arg) {\n      if (state === GenStateExecuting) {\n        throw new Error(\"Generator is already running\");\n      }\n\n      if (state === GenStateCompleted) {\n        if (method === \"throw\") {\n          throw arg;\n        }\n\n        // Be forgiving, per 25.3.3.3.3 of the spec:\n        // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume\n        return doneResult();\n      }\n\n      context.method = method;\n      context.arg = arg;\n\n      while (true) {\n        var delegate = context.delegate;\n        if (delegate) {\n          var delegateResult = maybeInvokeDelegate(delegate, context);\n          if (delegateResult) {\n            if (delegateResult === ContinueSentinel) continue;\n            return delegateResult;\n          }\n        }\n\n        if (context.method === \"next\") {\n          // Setting context._sent for legacy support of Babel's\n          // function.sent implementation.\n          context.sent = context._sent = context.arg;\n\n        } else if (context.method === \"throw\") {\n          if (state === GenStateSuspendedStart) {\n            state = GenStateCompleted;\n            throw context.arg;\n          }\n\n          context.dispatchException(context.arg);\n\n        } else if (context.method === \"return\") {\n          context.abrupt(\"return\", context.arg);\n        }\n\n        state = GenStateExecuting;\n\n        var record = tryCatch(innerFn, self, context);\n        if (record.type === \"normal\") {\n          // If an exception is thrown from innerFn, we leave state ===\n          // GenStateExecuting and loop back for another invocation.\n          state = context.done\n            ? GenStateCompleted\n            : GenStateSuspendedYield;\n\n          if (record.arg === ContinueSentinel) {\n            continue;\n          }\n\n          return {\n            value: record.arg,\n            done: context.done\n          };\n\n        } else if (record.type === \"throw\") {\n          state = GenStateCompleted;\n          // Dispatch the exception by looping back around to the\n          // context.dispatchException(context.arg) call above.\n          context.method = \"throw\";\n          context.arg = record.arg;\n        }\n      }\n    };\n  }\n\n  // Call delegate.iterator[context.method](context.arg) and handle the\n  // result, either by returning a { value, done } result from the\n  // delegate iterator, or by modifying context.method and context.arg,\n  // setting context.delegate to null, and returning the ContinueSentinel.\n  function maybeInvokeDelegate(delegate, context) {\n    var method = delegate.iterator[context.method];\n    if (method === undefined) {\n      // A .throw or .return when the delegate iterator has no .throw\n      // method always terminates the yield* loop.\n      context.delegate = null;\n\n      if (context.method === \"throw\") {\n        // Note: [\"return\"] must be used for ES3 parsing compatibility.\n        if (delegate.iterator[\"return\"]) {\n          // If the delegate iterator has a return method, give it a\n          // chance to clean up.\n          context.method = \"return\";\n          context.arg = undefined;\n          maybeInvokeDelegate(delegate, context);\n\n          if (context.method === \"throw\") {\n            // If maybeInvokeDelegate(context) changed context.method from\n            // \"return\" to \"throw\", let that override the TypeError below.\n            return ContinueSentinel;\n          }\n        }\n\n        context.method = \"throw\";\n        context.arg = new TypeError(\n          \"The iterator does not provide a 'throw' method\");\n      }\n\n      return ContinueSentinel;\n    }\n\n    var record = tryCatch(method, delegate.iterator, context.arg);\n\n    if (record.type === \"throw\") {\n      context.method = \"throw\";\n      context.arg = record.arg;\n      context.delegate = null;\n      return ContinueSentinel;\n    }\n\n    var info = record.arg;\n\n    if (! info) {\n      context.method = \"throw\";\n      context.arg = new TypeError(\"iterator result is not an object\");\n      context.delegate = null;\n      return ContinueSentinel;\n    }\n\n    if (info.done) {\n      // Assign the result of the finished delegate to the temporary\n      // variable specified by delegate.resultName (see delegateYield).\n      context[delegate.resultName] = info.value;\n\n      // Resume execution at the desired location (see delegateYield).\n      context.next = delegate.nextLoc;\n\n      // If context.method was \"throw\" but the delegate handled the\n      // exception, let the outer generator proceed normally. If\n      // context.method was \"next\", forget context.arg since it has been\n      // \"consumed\" by the delegate iterator. If context.method was\n      // \"return\", allow the original .return call to continue in the\n      // outer generator.\n      if (context.method !== \"return\") {\n        context.method = \"next\";\n        context.arg = undefined;\n      }\n\n    } else {\n      // Re-yield the result returned by the delegate method.\n      return info;\n    }\n\n    // The delegate iterator is finished, so forget it and continue with\n    // the outer generator.\n    context.delegate = null;\n    return ContinueSentinel;\n  }\n\n  // Define Generator.prototype.{next,throw,return} in terms of the\n  // unified ._invoke helper method.\n  defineIteratorMethods(Gp);\n\n  define(Gp, toStringTagSymbol, \"Generator\");\n\n  // A Generator should always return itself as the iterator object when the\n  // @@iterator function is called on it. Some browsers' implementations of the\n  // iterator prototype chain incorrectly implement this, causing the Generator\n  // object to not be returned from this call. This ensures that doesn't happen.\n  // See https://github.com/facebook/regenerator/issues/274 for more details.\n  define(Gp, iteratorSymbol, function() {\n    return this;\n  });\n\n  define(Gp, \"toString\", function() {\n    return \"[object Generator]\";\n  });\n\n  function pushTryEntry(locs) {\n    var entry = { tryLoc: locs[0] };\n\n    if (1 in locs) {\n      entry.catchLoc = locs[1];\n    }\n\n    if (2 in locs) {\n      entry.finallyLoc = locs[2];\n      entry.afterLoc = locs[3];\n    }\n\n    this.tryEntries.push(entry);\n  }\n\n  function resetTryEntry(entry) {\n    var record = entry.completion || {};\n    record.type = \"normal\";\n    delete record.arg;\n    entry.completion = record;\n  }\n\n  function Context(tryLocsList) {\n    // The root entry object (effectively a try statement without a catch\n    // or a finally block) gives us a place to store values thrown from\n    // locations where there is no enclosing try statement.\n    this.tryEntries = [{ tryLoc: \"root\" }];\n    tryLocsList.forEach(pushTryEntry, this);\n    this.reset(true);\n  }\n\n  exports.keys = function(object) {\n    var keys = [];\n    for (var key in object) {\n      keys.push(key);\n    }\n    keys.reverse();\n\n    // Rather than returning an object with a next method, we keep\n    // things simple and return the next function itself.\n    return function next() {\n      while (keys.length) {\n        var key = keys.pop();\n        if (key in object) {\n          next.value = key;\n          next.done = false;\n          return next;\n        }\n      }\n\n      // To avoid creating an additional object, we just hang the .value\n      // and .done properties off the next function object itself. This\n      // also ensures that the minifier will not anonymize the function.\n      next.done = true;\n      return next;\n    };\n  };\n\n  function values(iterable) {\n    if (iterable) {\n      var iteratorMethod = iterable[iteratorSymbol];\n      if (iteratorMethod) {\n        return iteratorMethod.call(iterable);\n      }\n\n      if (typeof iterable.next === \"function\") {\n        return iterable;\n      }\n\n      if (!isNaN(iterable.length)) {\n        var i = -1, next = function next() {\n          while (++i < iterable.length) {\n            if (hasOwn.call(iterable, i)) {\n              next.value = iterable[i];\n              next.done = false;\n              return next;\n            }\n          }\n\n          next.value = undefined;\n          next.done = true;\n\n          return next;\n        };\n\n        return next.next = next;\n      }\n    }\n\n    // Return an iterator with no values.\n    return { next: doneResult };\n  }\n  exports.values = values;\n\n  function doneResult() {\n    return { value: undefined, done: true };\n  }\n\n  Context.prototype = {\n    constructor: Context,\n\n    reset: function(skipTempReset) {\n      this.prev = 0;\n      this.next = 0;\n      // Resetting context._sent for legacy support of Babel's\n      // function.sent implementation.\n      this.sent = this._sent = undefined;\n      this.done = false;\n      this.delegate = null;\n\n      this.method = \"next\";\n      this.arg = undefined;\n\n      this.tryEntries.forEach(resetTryEntry);\n\n      if (!skipTempReset) {\n        for (var name in this) {\n          // Not sure about the optimal order of these conditions:\n          if (name.charAt(0) === \"t\" &&\n              hasOwn.call(this, name) &&\n              !isNaN(+name.slice(1))) {\n            this[name] = undefined;\n          }\n        }\n      }\n    },\n\n    stop: function() {\n      this.done = true;\n\n      var rootEntry = this.tryEntries[0];\n      var rootRecord = rootEntry.completion;\n      if (rootRecord.type === \"throw\") {\n        throw rootRecord.arg;\n      }\n\n      return this.rval;\n    },\n\n    dispatchException: function(exception) {\n      if (this.done) {\n        throw exception;\n      }\n\n      var context = this;\n      function handle(loc, caught) {\n        record.type = \"throw\";\n        record.arg = exception;\n        context.next = loc;\n\n        if (caught) {\n          // If the dispatched exception was caught by a catch block,\n          // then let that catch block handle the exception normally.\n          context.method = \"next\";\n          context.arg = undefined;\n        }\n\n        return !! caught;\n      }\n\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        var record = entry.completion;\n\n        if (entry.tryLoc === \"root\") {\n          // Exception thrown outside of any try block that could handle\n          // it, so set the completion value of the entire function to\n          // throw the exception.\n          return handle(\"end\");\n        }\n\n        if (entry.tryLoc <= this.prev) {\n          var hasCatch = hasOwn.call(entry, \"catchLoc\");\n          var hasFinally = hasOwn.call(entry, \"finallyLoc\");\n\n          if (hasCatch && hasFinally) {\n            if (this.prev < entry.catchLoc) {\n              return handle(entry.catchLoc, true);\n            } else if (this.prev < entry.finallyLoc) {\n              return handle(entry.finallyLoc);\n            }\n\n          } else if (hasCatch) {\n            if (this.prev < entry.catchLoc) {\n              return handle(entry.catchLoc, true);\n            }\n\n          } else if (hasFinally) {\n            if (this.prev < entry.finallyLoc) {\n              return handle(entry.finallyLoc);\n            }\n\n          } else {\n            throw new Error(\"try statement without catch or finally\");\n          }\n        }\n      }\n    },\n\n    abrupt: function(type, arg) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.tryLoc <= this.prev &&\n            hasOwn.call(entry, \"finallyLoc\") &&\n            this.prev < entry.finallyLoc) {\n          var finallyEntry = entry;\n          break;\n        }\n      }\n\n      if (finallyEntry &&\n          (type === \"break\" ||\n           type === \"continue\") &&\n          finallyEntry.tryLoc <= arg &&\n          arg <= finallyEntry.finallyLoc) {\n        // Ignore the finally entry if control is not jumping to a\n        // location outside the try/catch block.\n        finallyEntry = null;\n      }\n\n      var record = finallyEntry ? finallyEntry.completion : {};\n      record.type = type;\n      record.arg = arg;\n\n      if (finallyEntry) {\n        this.method = \"next\";\n        this.next = finallyEntry.finallyLoc;\n        return ContinueSentinel;\n      }\n\n      return this.complete(record);\n    },\n\n    complete: function(record, afterLoc) {\n      if (record.type === \"throw\") {\n        throw record.arg;\n      }\n\n      if (record.type === \"break\" ||\n          record.type === \"continue\") {\n        this.next = record.arg;\n      } else if (record.type === \"return\") {\n        this.rval = this.arg = record.arg;\n        this.method = \"return\";\n        this.next = \"end\";\n      } else if (record.type === \"normal\" && afterLoc) {\n        this.next = afterLoc;\n      }\n\n      return ContinueSentinel;\n    },\n\n    finish: function(finallyLoc) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.finallyLoc === finallyLoc) {\n          this.complete(entry.completion, entry.afterLoc);\n          resetTryEntry(entry);\n          return ContinueSentinel;\n        }\n      }\n    },\n\n    \"catch\": function(tryLoc) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.tryLoc === tryLoc) {\n          var record = entry.completion;\n          if (record.type === \"throw\") {\n            var thrown = record.arg;\n            resetTryEntry(entry);\n          }\n          return thrown;\n        }\n      }\n\n      // The context.catch method must only be called with a location\n      // argument that corresponds to a known catch block.\n      throw new Error(\"illegal catch attempt\");\n    },\n\n    delegateYield: function(iterable, resultName, nextLoc) {\n      this.delegate = {\n        iterator: values(iterable),\n        resultName: resultName,\n        nextLoc: nextLoc\n      };\n\n      if (this.method === \"next\") {\n        // Deliberately forget the last sent value so that we don't\n        // accidentally pass it on to the delegate.\n        this.arg = undefined;\n      }\n\n      return ContinueSentinel;\n    }\n  };\n\n  // Regardless of whether this script is executing as a CommonJS module\n  // or not, return the runtime object so that we can declare the variable\n  // regeneratorRuntime in the outer scope, which allows this module to be\n  // injected easily by `bin/regenerator --include-runtime script.js`.\n  return exports;\n\n}(\n  // If this script is executing as a CommonJS module, use module.exports\n  // as the regeneratorRuntime namespace. Otherwise create a new empty\n  // object. Either way, the resulting object will be used to initialize\n  // the regeneratorRuntime variable at the top of this file.\n  typeof module === \"object\" ? module.exports : {}\n));\n\ntry {\n  regeneratorRuntime = runtime;\n} catch (accidentalStrictMode) {\n  // This module should not be running in strict mode, so the above\n  // assignment should always work unless something is misconfigured. Just\n  // in case runtime.js accidentally runs in strict mode, in modern engines\n  // we can explicitly access globalThis. In older engines we can escape\n  // strict mode using a global Function call. This could conceivably fail\n  // if a Content Security Policy forbids using Function, but in that case\n  // the proper solution is to fix the accidental strict mode problem. If\n  // you've misconfigured your bundler to force strict mode and applied a\n  // CSP to forbid Function, and you're not willing to fix either of those\n  // problems, please detail your unique predicament in a GitHub issue.\n  if (typeof globalThis === \"object\") {\n    globalThis.regeneratorRuntime = runtime;\n  } else {\n    Function(\"r\", \"regeneratorRuntime = r\")(runtime);\n  }\n}\n","import create from \"zustand/vanilla\";\r\n\r\nexport interface AppStore {\r\n  secretKey: string;\r\n  setSecretKey: (secretKey: string) => void;\r\n}\r\n\r\nexport const store = create<AppStore>((set) => ({\r\n  secretKey: \"\",\r\n  setSecretKey: (secretKey) => set((state) => ({ ...state, secretKey })),\r\n}));\r\n","import axios from \"axios\";\r\nimport config from \"../config\";\r\nimport { store } from \"../store\";\r\n\r\nexport const baseUrl = config.BASE_URL;\r\n\r\nconst axiosInstance = axios.create({\r\n  baseURL: baseUrl,\r\n  headers: {\r\n    \"Content-type\": \"application/json\",\r\n    Accept: \"application/json\",\r\n    \"Access-Control-Allow-Origin\": \"*\",\r\n  },\r\n  responseType: \"json\",\r\n});\r\n\r\nstore.subscribe((state) => {\r\n  axiosInstance.defaults.auth = {\r\n    username: state.secretKey,\r\n    password: \"\",\r\n  };\r\n});\r\n\r\nexport default axiosInstance;\r\n","const config = {\r\n  BASE_URL: \"https://api.paymongo.com/v1\",\r\n};\r\n\r\nexport default config;\r\n","import api from \"../../utils/api-base\";\r\nimport { AttachPaymentIntentProps, AttachPaymentIntentResponse } from \"./types\";\r\n\r\n/**\r\n * @module attachPaymentIntent\r\n * @property {string} intentId - The id of the payment intent.\r\n * @property {string} methodId - The is of the payment method.\r\n * @property {string} clientKey - The client key of the payment intent.\r\n * @property {string} returnUrl - The return url of the payment intent.\r\n * @returns {AttachPaymentIntentResponse} - The payment intent data.\r\n *\r\n * @example\r\n * ```js\r\n * import PaymongoClient from \"paymongo.js\";\r\n *\r\n * const main = async () => {\r\n *  const client = PaymongoClient(\"sk_test_key\");\r\n *  data = await client.attachPaymentIntent({\r\n *    intentId: intent.data.id,\r\n *    methodId: method.data.id,\r\n *  });\r\n *  return data\r\n * }\r\n * ```\r\n */\r\nexport const attachPaymentIntent = async ({\r\n  intentId,\r\n  methodId,\r\n  clientKey,\r\n  returnUrl,\r\n}: AttachPaymentIntentProps): Promise<AttachPaymentIntentResponse> => {\r\n  const data: any = {\r\n    attributes: {\r\n      payment_method: methodId,\r\n    },\r\n  };\r\n\r\n  if (clientKey) data.attributes.client_key = clientKey;\r\n  if (returnUrl) data.attributes.return_url = returnUrl;\r\n\r\n  try {\r\n    const res = await api.post<AttachPaymentIntentResponse>(\r\n      `/payment_intents/${intentId}/attach`,\r\n      { data }\r\n    );\r\n    return res.data;\r\n  } catch (err) {\r\n    const error: any = err;\r\n    return error.response.data;\r\n  }\r\n};\r\n","import api from \"../../utils/api-base\";\r\nimport { PaymentIntentResponse, CreatePaymentIntentProps } from \"./types\";\r\n\r\nconst defaultProps: CreatePaymentIntentProps = {\r\n  amount: 0,\r\n  paymentMethodAllowed: [\"card\", \"paymaya\"],\r\n  currency: \"PHP\",\r\n  request3DS: \"any\",\r\n};\r\n\r\n/**\r\n * @module createPaymentIntent\r\n * @property {number} amount - amount of the payment intent in cents (PHP100 = 100000).\r\n * @property {PaymentType} paymentMethodAllowed - The payment method allowed.\r\n * @property {string} request3DS - any | automatic\r\n * @property {string} currency - The currency of the payment intent defaults to PHP.\r\n * @property {string} description - The description of the payment intent.\r\n * @property {string} statementDescriptor - The statement descriptor of the payment intent.\r\n * @property {object} metadata - The metadata of the payment intent.\r\n * @returns {PaymentIntentResponse} - The payment intent data.\r\n *\r\n * @example\r\n * ```js\r\n * import PaymongoClient from \"paymongo.js\";\r\n *\r\n * const main = async () => {\r\n *  const client = PaymongoClient(\"sk_test_key\");\r\n *  const data = await client.createPaymentIntent({\r\n *    amount: 10000,\r\n *    metadata: {\r\n *      order_id: \"abc123\",\r\n *    },\r\n *  });\r\n *  return data\r\n * }\r\n * ```\r\n */\r\nexport const createPaymentIntent = async ({\r\n  amount = defaultProps.amount,\r\n  currency = defaultProps.currency,\r\n  paymentMethodAllowed = defaultProps.paymentMethodAllowed,\r\n  request3DS = defaultProps.request3DS,\r\n  description,\r\n  statementDescriptor,\r\n  metadata,\r\n}: CreatePaymentIntentProps): Promise<PaymentIntentResponse> => {\r\n  const data: any = {\r\n    attributes: {\r\n      amount,\r\n      payment_method_allowed: paymentMethodAllowed,\r\n      payment_method_options: {\r\n        card: {\r\n          request_three_d_secure: request3DS,\r\n        },\r\n      },\r\n      currency,\r\n    },\r\n  };\r\n\r\n  if (description) data.attributes.description = description;\r\n  if (statementDescriptor)\r\n    data.attributes.statement_descriptor = statementDescriptor;\r\n  if (metadata) data.attributes.metadata = metadata;\r\n\r\n  try {\r\n    const res = await api.post<PaymentIntentResponse>(\"/payment_intents\", {\r\n      data,\r\n    });\r\n    return res.data;\r\n  } catch (err) {\r\n    const error: any = err;\r\n    return error.response.data;\r\n  }\r\n};\r\n","import api from \"../../utils/api-base\";\r\nimport { PaymentIntentResponse, RetrievePaymentIntentProps } from \"./types\";\r\n\r\n/**\r\n * @module retrievePaymentIntent\r\n * @property {string} id - The id of the payment intent.\r\n * @property {string} clientKey - The client key of the payment intent.\r\n * @returns {PaymentIntentResponse} - The payment intent data.\r\n *\r\n * @example\r\n * ```js\r\n * import PaymongoClient from \"paymongo.js\";\r\n *\r\n * const main = async () => {\r\n *  const client = PaymongoClient(\"sk_test_key\");\r\n *  data = await client.retrievePaymentIntent({\r\n *    id: \"pi_key\",\r\n *  });\r\n *  return data\r\n * }\r\n * ```\r\n */\r\nexport const retrievePaymentIntent = async ({\r\n  intentId,\r\n  clientKey,\r\n}: RetrievePaymentIntentProps): Promise<PaymentIntentResponse> => {\r\n  try {\r\n    let url = `/payment_intents/${intentId}`;\r\n    if (clientKey) url = `${url}?client_key=${clientKey}`;\r\n    const res = await api.get<PaymentIntentResponse>(url);\r\n    return res.data;\r\n  } catch (err) {\r\n    const error: any = err;\r\n    return error.response.data;\r\n  }\r\n};\r\n","import api from \"../../utils/api-base\";\r\nimport { CreatePaymentMethodProps, PaymentMethodResponse } from \"./types\";\r\n\r\n/**\r\n * @module createPaymentMethod\r\n * @property {Object} details - The payment method details\r\n * @property {string} type - The type of payment method. The possible values are card and paymaya for now.\r\n * @property {Object} billing - The billing details\r\n * @property {Object} metadata - The metadata of the payment intent.\r\n * @returns {PaymentMethodResponse} - The payment method data.\r\n *\r\n * @example\r\n * ```js\r\n * import PaymongoClient from \"paymongo.js\";\r\n *\r\n * const main = async () => {\r\n *  const client = PaymongoClient(\"sk_test_key\");\r\n *  const data = await client.createPaymentMethod({\r\n *    details: {\r\n *      card_number: \"4343434343434345\",\r\n *      exp_month: 3,\r\n *      exp_year: 2023,\r\n *      cvc: \"321\",\r\n *    },\r\n *    type: \"card\",\r\n *  });\r\n *  return data\r\n * }\r\n * ```\r\n */\r\nexport const createPaymentMethod = async ({\r\n  details,\r\n  type,\r\n  billing,\r\n  metadata,\r\n}: CreatePaymentMethodProps): Promise<PaymentMethodResponse> => {\r\n  const data: any = {\r\n    attributes: {\r\n      details,\r\n      type,\r\n    },\r\n  };\r\n\r\n  if (billing) data.attributes.billing = billing;\r\n  if (metadata) data.attributes.metadata = metadata;\r\n\r\n  try {\r\n    const res = await api.post<PaymentMethodResponse>(\"/payment_methods\", {\r\n      data,\r\n    });\r\n    return res.data;\r\n  } catch (err) {\r\n    const error: any = err;\r\n    return error.response.data;\r\n  }\r\n};\r\n","import api from \"../../utils/api-base\";\r\nimport { RetrievePaymentMethodProps, PaymentMethodResponse } from \"./types\";\r\n\r\n/**\r\n * @module retrievePaymentMethod\r\n * @property {string} id - The id of the payment method.\r\n * @returns {PaymentMethodResponse} - The payment method data.\r\n *\r\n * @example\r\n * ```js\r\n * import PaymongoClient from \"paymongo.js\";\r\n *\r\n * const main = async () => {\r\n *  const client = PaymongoClient(\"sk_test_key\");\r\n *  data = await client.retrievePaymentMethod({\r\n *    id: \"pm_key\",\r\n *  });\r\n *  return data\r\n * }\r\n * ```\r\n */\r\nexport const retrievePaymentMethod = async ({\r\n  methodId,\r\n}: RetrievePaymentMethodProps): Promise<PaymentMethodResponse> => {\r\n  try {\r\n    const res = await api.get<PaymentMethodResponse>(\r\n      `/payment_methods/${methodId}`\r\n    );\r\n    return res.data;\r\n  } catch (err) {\r\n    const error: any = err;\r\n    return error.response.data;\r\n  }\r\n};\r\n","import api from \"../../utils/api-base\";\r\nimport { CreateWebhookProps, PaymentWebhookResponse } from \"./types\";\r\n\r\n/**\r\n * @module createWebhook\r\n * @property {string} url - The webhook url\r\n * @property {string[]} events - The webhook events (\"source.chargeable\" | \"payment.paid\" | \"payment.failed\")\r\n * @returns {PaymentWebhookResponse} - The payment webhook data.\r\n *\r\n * @example\r\n * ```js\r\n * import PaymongoClient from \"paymongo.js\";\r\n *\r\n * const main = async () => {\r\n *  const client = PaymongoClient(\"sk_test_key\");\r\n *  const webhook = await client.createWebhook({\r\n *    events: [\"payment.failed\", \"payment.paid\", \"source.chargeable\"],\r\n *    url: \"https://example.com/webhook\",\r\n *  });\r\n *  return webhook;\r\n * }\r\n * ```\r\n */\r\nexport const createWebhook = async ({\r\n  url,\r\n  events,\r\n}: CreateWebhookProps): Promise<PaymentWebhookResponse> => {\r\n  const data: any = {\r\n    attributes: {\r\n      url,\r\n      events,\r\n    },\r\n  };\r\n\r\n  try {\r\n    const response = await api.post<PaymentWebhookResponse>(\"/webhooks\", {\r\n      data,\r\n    });\r\n    return response.data;\r\n  } catch (err) {\r\n    const error: any = err;\r\n    return error.response.data;\r\n  }\r\n};\r\n","import api from \"../../utils/api-base\";\r\nimport { PaymentWebhookResponse } from \"./types\";\r\n\r\n/**\r\n * @module disableWebhook\r\n * @property {string} webhookId - The webhook id\r\n * @returns {PaymentWebhookResponse} - The payment webhook data.\r\n *\r\n * @example\r\n * ```js\r\n * import PaymongoClient from \"paymongo.js\";\r\n *\r\n * const main = async () => {\r\n *  const client = PaymongoClient(\"sk_test_key\");\r\n *  const webhook = await client.disableWebhook(\"webhook_id\");\r\n *  return webhook;\r\n * }\r\n * ```\r\n */\r\nexport const disableWebhook = async (\r\n  webhookId: string\r\n): Promise<PaymentWebhookResponse> => {\r\n  try {\r\n    const response = await api.post<PaymentWebhookResponse>(\r\n      `/webhooks/${webhookId}/disable`\r\n    );\r\n    return response.data;\r\n  } catch (err) {\r\n    const error: any = err;\r\n    return error.response.data;\r\n  }\r\n};\r\n","import api from \"../../utils/api-base\";\r\nimport { PaymentWebhookResponse } from \"./types\";\r\n\r\n/**\r\n * @module enableWebhook\r\n * @property {string} webhookId - The webhook id\r\n * @returns {PaymentWebhookResponse} - The payment webhook data.\r\n *\r\n * @example\r\n * ```js\r\n * import PaymongoClient from \"paymongo.js\";\r\n *\r\n * const main = async () => {\r\n *  const client = PaymongoClient(\"sk_test_key\");\r\n *  const webhook = await client.enableWebhook(\"webhook_id\");\r\n *  return webhook;\r\n * }\r\n * ```\r\n */\r\nexport const enableWebhook = async (\r\n  webhookId: string\r\n): Promise<PaymentWebhookResponse> => {\r\n  try {\r\n    const response = await api.post<PaymentWebhookResponse>(\r\n      `/webhooks/${webhookId}/enable`\r\n    );\r\n    return response.data;\r\n  } catch (err) {\r\n    const error: any = err;\r\n    return error.response.data;\r\n  }\r\n};\r\n","import api from \"../../utils/api-base\";\r\nimport { PaymentWebhookResponse } from \"./types\";\r\n\r\nexport const listWebhooks = async (): Promise<PaymentWebhookResponse[]> => {\r\n  try {\r\n    const response = await api.get<PaymentWebhookResponse[]>(\"/webhooks\");\r\n    return response.data;\r\n  } catch (err) {\r\n    const error: any = err;\r\n    return error.response.data;\r\n  }\r\n};\r\n","import api from \"../../utils/api-base\";\r\nimport { PaymentWebhookResponse } from \"./types\";\r\n\r\n/**\r\n * @module retrieveWebhook\r\n * @property {string} webhookId - The webhook id\r\n * @returns {PaymentWebhookResponse} - The payment webhook data.\r\n *\r\n * @example\r\n * ```js\r\n * import PaymongoClient from \"paymongo.js\";\r\n *\r\n * const main = async () => {\r\n *  const client = PaymongoClient(\"sk_test_key\");\r\n *  const webhook = await client.retrieveWebhook(\"webhook_id\");\r\n *  return webhook;\r\n * }\r\n * ```\r\n */\r\nexport const retrieveWebhook = async (\r\n  webhookId: string\r\n): Promise<PaymentWebhookResponse> => {\r\n  try {\r\n    const response = await api.get<PaymentWebhookResponse>(\r\n      `/webhooks/${webhookId}`\r\n    );\r\n    return response.data;\r\n  } catch (err) {\r\n    const error: any = err;\r\n    return error.response.data;\r\n  }\r\n};\r\n","import api from \"../../utils/api-base\";\r\nimport { UpdateWebhookProps, PaymentWebhookResponse } from \"./types\";\r\n\r\n/**\r\n * @module updateWebhook\r\n * @property {string} webhookId - The ID of the webhook to update.\r\n * @property {string} url - The webhook url\r\n * @property {string[]} events - The webhook events (\"source.chargeable\" | \"payment.paid\" | \"payment.failed\")\r\n * @returns {PaymentWebhookResponse} - The payment webhook data.\r\n *\r\n * @example\r\n * ```js\r\n * import PaymongoClient from \"paymongo.js\";\r\n *\r\n * const main = async () => {\r\n *  const client = PaymongoClient(\"sk_test_key\");\r\n *  const webhook = await client.createWebhook({\r\n *    events: [\"payment.failed\", \"payment.paid\", \"source.chargeable\"],\r\n *    url: \"https://example.com/webhook\",\r\n *  });\r\n *  return webhook;\r\n * }\r\n * ```\r\n */\r\nexport const updateWebhook = async ({\r\n  webhookId,\r\n  url,\r\n  events,\r\n}: UpdateWebhookProps): Promise<PaymentWebhookResponse> => {\r\n  const data: any = {\r\n    attributes: {\r\n      url,\r\n      events,\r\n    },\r\n  };\r\n\r\n  try {\r\n    const response = await api.put<PaymentWebhookResponse>(\r\n      `/webhooks/${webhookId}`,\r\n      { data }\r\n    );\r\n    return response.data;\r\n  } catch (err) {\r\n    const error: any = err;\r\n    return error.response.data;\r\n  }\r\n};\r\n","import api from \"../../utils/api-base\";\r\nimport { CurrencyType } from \"../types\";\r\nimport { PaymentSourceResponse, CreateSourceProps } from \"./types\";\r\n\r\nconst defaultProps = {\r\n  amount: 0,\r\n  type: \"gcash\",\r\n  currency: \"PHP\",\r\n};\r\n\r\n/**\r\n * @module createSource\r\n * @property {number} amount - amount of the payment source in cents (PHP100 = 100000).\r\n * @property {RedirectType} redirect - redirect url for success and failed payment.\r\n * @property {SourceType} type - type of the payment source, it's either gcash | grab_pay.\r\n * @property {CurrencyType} currency - currency of the payment source, defaults to PHP.\r\n * @property {BillingProps} billing - billing information of the payment source.\r\n * @returns {CreateSourceResponse} - The response of the create source request.\r\n *\r\n * @example\r\n * ```js\r\n * import PaymongoClient from \"paymongo.js\";\r\n *\r\n * const main = async () => {\r\n *  const client = PaymongoClient(\"pk_test_key\");\r\n *  const data = await client.createSource({\r\n *    amount: 10000,\r\n *    redirect: {\r\n *      success: `http://localhost:3000/payments/success`,\r\n *      failed: `http://localhost:3000/payments/error`,\r\n *    },\r\n *    type: \"gcash\",\r\n *    currency: \"PHP\",\r\n *  });\r\n *\r\n *  return data\r\n * }\r\n * ```\r\n */\r\nexport const createSource = async ({\r\n  amount = defaultProps.amount,\r\n  type = defaultProps.type,\r\n  currency = defaultProps.currency as CurrencyType,\r\n  redirect,\r\n  billing,\r\n}: CreateSourceProps): Promise<PaymentSourceResponse> => {\r\n  const data: any = {\r\n    attributes: {\r\n      amount,\r\n      redirect,\r\n      type,\r\n      currency,\r\n    },\r\n  };\r\n\r\n  if (billing) data.attributes.billing = billing;\r\n\r\n  try {\r\n    const response = await api.post<PaymentSourceResponse>(\"/sources\", data);\r\n    return response.data;\r\n  } catch (err) {\r\n    const error: any = err;\r\n    return error.response.data;\r\n  }\r\n};\r\n","import api from \"../../utils/api-base\";\r\nimport { RetrieveSourceProps, PaymentSourceResponse } from \"./types\";\r\n\r\n/**\r\n * @module retrieveSource\r\n * @property {string} sourceId - The id of the payment source.\r\n * @returns {RetrieveSourceResponse} - The payment source data.\r\n *\r\n * @example\r\n * ```js\r\n * import PaymongoClient from \"paymongo.js\";\r\n *\r\n * const main = async () => {\r\n *  const client = PaymongoClient(\"pk_test_key\");\r\n *  data = await client.retrieveSource({\r\n *    sourceId: \"source_id\",\r\n *  });\r\n *  return data\r\n * }\r\n * ```\r\n */\r\nexport const retrieveSource = async ({\r\n  sourceId,\r\n}: RetrieveSourceProps): Promise<PaymentSourceResponse> => {\r\n  try {\r\n    const res = await api.get<PaymentSourceResponse>(`/sources/${sourceId}`);\r\n    return res.data;\r\n  } catch (err) {\r\n    const error: any = err;\r\n    return error.response.data;\r\n  }\r\n};\r\n","import {\r\n  attachPaymentIntent,\r\n  createPaymentIntent,\r\n  retrievePaymentIntent,\r\n} from \"./payment/intent\";\r\nimport { createPaymentMethod, retrievePaymentMethod } from \"./payment/method\";\r\nimport {\r\n  createWebhook,\r\n  disableWebhook,\r\n  enableWebhook,\r\n  listWebhooks,\r\n  retrieveWebhook,\r\n  updateWebhook,\r\n} from \"./payment/webhook\";\r\nimport { createSource, retrieveSource } from \"./payment/source\";\r\nimport { store } from \"./store\";\r\n\r\nexport * from \"./payment/types\";\r\n\r\nexport interface PaymongoClient {\r\n  // intent\r\n  attachPaymentIntent: typeof attachPaymentIntent;\r\n  createPaymentIntent: typeof createPaymentIntent;\r\n  retrievePaymentIntent: typeof retrievePaymentIntent;\r\n  // method\r\n  createPaymentMethod: typeof createPaymentMethod;\r\n  retrievePaymentMethod: typeof retrievePaymentMethod;\r\n  // webhook\r\n  createWebhook: typeof createWebhook;\r\n  disableWebhook: typeof disableWebhook;\r\n  enableWebhook: typeof enableWebhook;\r\n  listWebhooks: typeof listWebhooks;\r\n  retrieveWebhook: typeof retrieveWebhook;\r\n  updateWebhook: typeof updateWebhook;\r\n}\r\n\r\nexport type ClientFunction = (secretKey: string) => PaymongoClient;\r\n\r\nconst PaymongoClient: ClientFunction = (secretKey: string) => {\r\n  store.setState((state) => ({ ...state, secretKey }));\r\n\r\n  return {\r\n    attachPaymentIntent,\r\n    createPaymentIntent,\r\n    retrievePaymentIntent,\r\n    createPaymentMethod,\r\n    retrievePaymentMethod,\r\n    createWebhook,\r\n    disableWebhook,\r\n    enableWebhook,\r\n    listWebhooks,\r\n    retrieveWebhook,\r\n    updateWebhook,\r\n    createSource,\r\n    retrieveSource,\r\n  };\r\n};\r\n\r\nexport default PaymongoClient;\r\n"],"names":["runtime","exports","Op","Object","prototype","hasOwn","hasOwnProperty","$Symbol","Symbol","iteratorSymbol","iterator","asyncIteratorSymbol","asyncIterator","toStringTagSymbol","toStringTag","define","obj","key","value","defineProperty","enumerable","configurable","writable","err","wrap","innerFn","outerFn","self","tryLocsList","generator","create","Generator","context","Context","_invoke","state","method","arg","Error","undefined","done","delegate","delegateResult","maybeInvokeDelegate","ContinueSentinel","sent","_sent","dispatchException","abrupt","record","tryCatch","type","makeInvokeMethod","fn","call","GeneratorFunction","GeneratorFunctionPrototype","IteratorPrototype","this","getProto","getPrototypeOf","NativeIteratorPrototype","values","Gp","defineIteratorMethods","forEach","AsyncIterator","PromiseImpl","previousPromise","callInvokeWithMethodAndArg","resolve","reject","invoke","result","__await","then","unwrapped","error","TypeError","info","resultName","next","nextLoc","pushTryEntry","locs","entry","tryLoc","catchLoc","finallyLoc","afterLoc","tryEntries","push","resetTryEntry","completion","reset","iterable","iteratorMethod","isNaN","length","i","doneResult","displayName","isGeneratorFunction","genFun","ctor","constructor","name","mark","setPrototypeOf","__proto__","awrap","async","Promise","iter","keys","object","reverse","pop","skipTempReset","prev","charAt","slice","stop","rootRecord","rval","exception","handle","loc","caught","hasCatch","hasFinally","finallyEntry","complete","finish","catch","thrown","delegateYield","module","regeneratorRuntime","accidentalStrictMode","globalThis","Function","store","set","secretKey","setSecretKey","axiosInstance","axios","baseURL","headers","Accept","responseType","subscribe","defaults","auth","username","password","attachPaymentIntent","intentId","returnUrl","data","attributes","payment_method","methodId","clientKey","client_key","return_url","api","post","response","defaultProps","amount","paymentMethodAllowed","currency","request3DS","createPaymentIntent","statementDescriptor","metadata","payment_method_allowed","payment_method_options","card","request_three_d_secure","description","statement_descriptor","retrievePaymentIntent","url","get","createPaymentMethod","details","billing","retrievePaymentMethod","createWebhook","events","disableWebhook","webhookId","enableWebhook","listWebhooks","retrieveWebhook","updateWebhook","put","createSource","redirect","retrieveSource","sourceId","setState"],"mappings":"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"}